<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yu.db.mapping.StorageServerMapper">

	<resultMap id="BaseResultMap" type="com.yu.db.model.StorageServer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="port" property="port" jdbcType="INTEGER" />
		<result column="max_volume" property="maxVolume" jdbcType="INTEGER" />
		<result column="left_volume" property="leftVolume" jdbcType="INTEGER" />
		<result column="storage_dir" property="storageDir" jdbcType="VARCHAR" />
		<result column="ip_address" property="ipAddress" jdbcType="VARCHAR" />
		<result column="is_alive" property="isAlive" jdbcType="BIT" />
	</resultMap>

	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		id, name, port, max_volume, left_volume,
		storage_dir,ip_address,is_alive
	</sql>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		select
		<include refid="Base_Column_List" />
		from storage_server
		where id = #{id,jdbcType=INTEGER}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		storage_server
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="com.yu.db.model.StorageServer">
		insert into storage_server (
		<include refid="Base_Column_List" />
		)
		values (
		#{id,jdbcType=INTEGER},
		#{name,jdbcType=VARCHAR},
		#{port,jdbcType=INTEGER},
		#{maxVolume,jdbcType=INTEGER},
		#{leftVolume,jdbcType=INTEGER},
		#{storageDir,jdbcType=VARCHAR},
		#{ipAddress,jdbcType=VARCHAR},
		#{isAlive,jdbcType=BIT}
		)
	</insert>

	<update id="updateByName" parameterType="com.yu.db.model.StorageServer">
		update storage_server
		<set>
			<if test="isAlive != null">
			is_alive = #{isAlive,jdbcType=BIT},
			</if>
			<!-- <if test="ipAddress != null"> -->
			<!-- ip_address = #{ipAddress,jdbcType=VARCHAR}, -->
			<!-- </if> -->
			<!-- <if test="name != null"> -->
			<!-- name = #{name,jdbcType=VARCHAR}, -->
			<!-- </if> -->
			<!-- <if test="port != null"> -->
			<!-- port = #{port,jdbcType=INTEGER}, -->
			<!-- </if> -->
			<if test="maxVolume != null">
				max_volume = #{maxVolume,jdbcType=INTEGER},
			</if>
			<if test="leftVolume != null">
				left_volume = #{leftVolume,jdbcType=INTEGER},
			</if>
			<!-- <if test="storageDir != null"> -->
			<!-- storage_dir = #{storageDir,jdbcType=VARCHAR}, -->
			<!-- </if> -->
		</set>
		where name = #{name,jdbcType=VARCHAR}
	</update>

	<select id="getStorageServerBySizeLimit" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from storage_server
		where left_volume > #{limit} and is_alive=1
	</select>

	<select id="selectStorageServerByName" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from storage_server
		where name=#{name,jdbcType=VARCHAR}
	</select>
</mapper>